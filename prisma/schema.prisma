// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// #Prisma가 schema.prisma 파일을 보는 이유
// 1) model들을 DB에 push하고 SQL migration을 자동으로 처리하기 위함
// 2) DB와 상호작용하기 위해 client를 생성하고 그 client에 자동완성으로 타입들을 추가하기 위해.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// 데이터베이스에 사용될 모델
model User {
  id        Int         @id @default(autoincrement())
  name      String
  phone     String?     @unique
  email     String?     @unique
  avater    String?
  createAt  DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  token     Token[]
  products  Prodcut[]
  fav       Fav[]
  posts     Post[]
  answers   Answer[]
  wondering Wondering[]
}

model Token {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  payload   String   @unique
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Prodcut {
  id          Int      @id @default(autoincrement())
  createAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String   @db.MediumText
  name        String
  price       Float
  description String   @db.MediumText
  favs        Fav[]
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Prodcut  @relation(fields: [prodcutId], references: [id], onDelete: Cascade)
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  prodcutId Int
}

model Post {
  id        Int         @id @default(autoincrement())
  createAt  DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String      @db.MediumText
  answers   Answer[]
  wondering Wondering[]
}

model Answer {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  answer    String   @db.MediumText
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
}

model Wondering {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
}
